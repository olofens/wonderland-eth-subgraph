// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogDeploy extends ethereum.Event {
  get params(): LogDeploy__Params {
    return new LogDeploy__Params(this);
  }
}

export class LogDeploy__Params {
  _event: LogDeploy;

  constructor(event: LogDeploy) {
    this._event = event;
  }

  get masterContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get data(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get cloneAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LogDeposit extends ethereum.Event {
  get params(): LogDeposit__Params {
    return new LogDeposit__Params(this);
  }
}

export class LogDeposit__Params {
  _event: LogDeposit;

  constructor(event: LogDeposit) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get share(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LogFlashLoan extends ethereum.Event {
  get params(): LogFlashLoan__Params {
    return new LogFlashLoan__Params(this);
  }
}

export class LogFlashLoan__Params {
  _event: LogFlashLoan;

  constructor(event: LogFlashLoan) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class LogRegisterProtocol extends ethereum.Event {
  get params(): LogRegisterProtocol__Params {
    return new LogRegisterProtocol__Params(this);
  }
}

export class LogRegisterProtocol__Params {
  _event: LogRegisterProtocol;

  constructor(event: LogRegisterProtocol) {
    this._event = event;
  }

  get protocol(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogSetMasterContractApproval extends ethereum.Event {
  get params(): LogSetMasterContractApproval__Params {
    return new LogSetMasterContractApproval__Params(this);
  }
}

export class LogSetMasterContractApproval__Params {
  _event: LogSetMasterContractApproval;

  constructor(event: LogSetMasterContractApproval) {
    this._event = event;
  }

  get masterContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class LogStrategyDivest extends ethereum.Event {
  get params(): LogStrategyDivest__Params {
    return new LogStrategyDivest__Params(this);
  }
}

export class LogStrategyDivest__Params {
  _event: LogStrategyDivest;

  constructor(event: LogStrategyDivest) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogStrategyInvest extends ethereum.Event {
  get params(): LogStrategyInvest__Params {
    return new LogStrategyInvest__Params(this);
  }
}

export class LogStrategyInvest__Params {
  _event: LogStrategyInvest;

  constructor(event: LogStrategyInvest) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogStrategyLoss extends ethereum.Event {
  get params(): LogStrategyLoss__Params {
    return new LogStrategyLoss__Params(this);
  }
}

export class LogStrategyLoss__Params {
  _event: LogStrategyLoss;

  constructor(event: LogStrategyLoss) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogStrategyProfit extends ethereum.Event {
  get params(): LogStrategyProfit__Params {
    return new LogStrategyProfit__Params(this);
  }
}

export class LogStrategyProfit__Params {
  _event: LogStrategyProfit;

  constructor(event: LogStrategyProfit) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogStrategyQueued extends ethereum.Event {
  get params(): LogStrategyQueued__Params {
    return new LogStrategyQueued__Params(this);
  }
}

export class LogStrategyQueued__Params {
  _event: LogStrategyQueued;

  constructor(event: LogStrategyQueued) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LogStrategySet extends ethereum.Event {
  get params(): LogStrategySet__Params {
    return new LogStrategySet__Params(this);
  }
}

export class LogStrategySet__Params {
  _event: LogStrategySet;

  constructor(event: LogStrategySet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LogStrategyTargetPercentage extends ethereum.Event {
  get params(): LogStrategyTargetPercentage__Params {
    return new LogStrategyTargetPercentage__Params(this);
  }
}

export class LogStrategyTargetPercentage__Params {
  _event: LogStrategyTargetPercentage;

  constructor(event: LogStrategyTargetPercentage) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get targetPercentage(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogTransfer extends ethereum.Event {
  get params(): LogTransfer__Params {
    return new LogTransfer__Params(this);
  }
}

export class LogTransfer__Params {
  _event: LogTransfer;

  constructor(event: LogTransfer) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogWhiteListMasterContract extends ethereum.Event {
  get params(): LogWhiteListMasterContract__Params {
    return new LogWhiteListMasterContract__Params(this);
  }
}

export class LogWhiteListMasterContract__Params {
  _event: LogWhiteListMasterContract;

  constructor(event: LogWhiteListMasterContract) {
    this._event = event;
  }

  get masterContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class LogWithdraw extends ethereum.Event {
  get params(): LogWithdraw__Params {
    return new LogWithdraw__Params(this);
  }
}

export class LogWithdraw__Params {
  _event: LogWithdraw;

  constructor(event: LogWithdraw) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get share(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Degenbox__strategyDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Degenbox__totalsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Degenbox__withdrawResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Degenbox extends ethereum.SmartContract {
  static bind(address: Address): Degenbox {
    return new Degenbox("Degenbox", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  masterContractApproved(param0: Address, param1: Address): boolean {
    let result = super.call(
      "masterContractApproved",
      "masterContractApproved(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_masterContractApproved(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "masterContractApproved",
      "masterContractApproved(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  masterContractOf(param0: Address): Address {
    let result = super.call(
      "masterContractOf",
      "masterContractOf(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_masterContractOf(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "masterContractOf",
      "masterContractOf(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingStrategy(param0: Address): Address {
    let result = super.call(
      "pendingStrategy",
      "pendingStrategy(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_pendingStrategy(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pendingStrategy",
      "pendingStrategy(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  strategy(param0: Address): Address {
    let result = super.call("strategy", "strategy(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_strategy(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("strategy", "strategy(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  strategyData(param0: Address): Degenbox__strategyDataResult {
    let result = super.call(
      "strategyData",
      "strategyData(address):(uint64,uint64,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Degenbox__strategyDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_strategyData(
    param0: Address
  ): ethereum.CallResult<Degenbox__strategyDataResult> {
    let result = super.tryCall(
      "strategyData",
      "strategyData(address):(uint64,uint64,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Degenbox__strategyDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  toAmount(token: Address, share: BigInt, roundUp: boolean): BigInt {
    let result = super.call(
      "toAmount",
      "toAmount(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(share),
        ethereum.Value.fromBoolean(roundUp)
      ]
    );

    return result[0].toBigInt();
  }

  try_toAmount(
    token: Address,
    share: BigInt,
    roundUp: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toAmount",
      "toAmount(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(share),
        ethereum.Value.fromBoolean(roundUp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  toShare(token: Address, amount: BigInt, roundUp: boolean): BigInt {
    let result = super.call(
      "toShare",
      "toShare(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBoolean(roundUp)
      ]
    );

    return result[0].toBigInt();
  }

  try_toShare(
    token: Address,
    amount: BigInt,
    roundUp: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toShare",
      "toShare(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBoolean(roundUp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totals(param0: Address): Degenbox__totalsResult {
    let result = super.call("totals", "totals(address):(uint128,uint128)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new Degenbox__totalsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_totals(param0: Address): ethereum.CallResult<Degenbox__totalsResult> {
    let result = super.tryCall("totals", "totals(address):(uint128,uint128)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Degenbox__totalsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  whitelistedMasterContracts(param0: Address): boolean {
    let result = super.call(
      "whitelistedMasterContracts",
      "whitelistedMasterContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_whitelistedMasterContracts(
    param0: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whitelistedMasterContracts",
      "whitelistedMasterContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdraw(
    token_: Address,
    from: Address,
    to: Address,
    amount: BigInt,
    share: BigInt
  ): Degenbox__withdrawResult {
    let result = super.call(
      "withdraw",
      "withdraw(address,address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token_),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );

    return new Degenbox__withdrawResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_withdraw(
    token_: Address,
    from: Address,
    to: Address,
    amount: BigInt,
    share: BigInt
  ): ethereum.CallResult<Degenbox__withdrawResult> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(address,address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token_),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Degenbox__withdrawResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get wethToken_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BatchCall extends ethereum.Call {
  get inputs(): BatchCall__Inputs {
    return new BatchCall__Inputs(this);
  }

  get outputs(): BatchCall__Outputs {
    return new BatchCall__Outputs(this);
  }
}

export class BatchCall__Inputs {
  _call: BatchCall;

  constructor(call: BatchCall) {
    this._call = call;
  }

  get calls(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get revertOnFail(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class BatchCall__Outputs {
  _call: BatchCall;

  constructor(call: BatchCall) {
    this._call = call;
  }

  get successes(): Array<boolean> {
    return this._call.outputValues[0].value.toBooleanArray();
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[1].value.toBytesArray();
  }
}

export class BatchFlashLoanCall extends ethereum.Call {
  get inputs(): BatchFlashLoanCall__Inputs {
    return new BatchFlashLoanCall__Inputs(this);
  }

  get outputs(): BatchFlashLoanCall__Outputs {
    return new BatchFlashLoanCall__Outputs(this);
  }
}

export class BatchFlashLoanCall__Inputs {
  _call: BatchFlashLoanCall;

  constructor(call: BatchFlashLoanCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receivers(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class BatchFlashLoanCall__Outputs {
  _call: BatchFlashLoanCall;

  constructor(call: BatchFlashLoanCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get masterContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get useCreate2(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get cloneAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get share(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get shareOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class FlashLoanCall extends ethereum.Call {
  get inputs(): FlashLoanCall__Inputs {
    return new FlashLoanCall__Inputs(this);
  }

  get outputs(): FlashLoanCall__Outputs {
    return new FlashLoanCall__Outputs(this);
  }
}

export class FlashLoanCall__Inputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class FlashLoanCall__Outputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get balance(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get maxChangeAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class PermitTokenCall extends ethereum.Call {
  get inputs(): PermitTokenCall__Inputs {
    return new PermitTokenCall__Inputs(this);
  }

  get outputs(): PermitTokenCall__Outputs {
    return new PermitTokenCall__Outputs(this);
  }
}

export class PermitTokenCall__Inputs {
  _call: PermitTokenCall;

  constructor(call: PermitTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class PermitTokenCall__Outputs {
  _call: PermitTokenCall;

  constructor(call: PermitTokenCall) {
    this._call = call;
  }
}

export class RegisterProtocolCall extends ethereum.Call {
  get inputs(): RegisterProtocolCall__Inputs {
    return new RegisterProtocolCall__Inputs(this);
  }

  get outputs(): RegisterProtocolCall__Outputs {
    return new RegisterProtocolCall__Outputs(this);
  }
}

export class RegisterProtocolCall__Inputs {
  _call: RegisterProtocolCall;

  constructor(call: RegisterProtocolCall) {
    this._call = call;
  }
}

export class RegisterProtocolCall__Outputs {
  _call: RegisterProtocolCall;

  constructor(call: RegisterProtocolCall) {
    this._call = call;
  }
}

export class SetMasterContractApprovalCall extends ethereum.Call {
  get inputs(): SetMasterContractApprovalCall__Inputs {
    return new SetMasterContractApprovalCall__Inputs(this);
  }

  get outputs(): SetMasterContractApprovalCall__Outputs {
    return new SetMasterContractApprovalCall__Outputs(this);
  }
}

export class SetMasterContractApprovalCall__Inputs {
  _call: SetMasterContractApprovalCall;

  constructor(call: SetMasterContractApprovalCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get masterContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SetMasterContractApprovalCall__Outputs {
  _call: SetMasterContractApprovalCall;

  constructor(call: SetMasterContractApprovalCall) {
    this._call = call;
  }
}

export class SetStrategyCall extends ethereum.Call {
  get inputs(): SetStrategyCall__Inputs {
    return new SetStrategyCall__Inputs(this);
  }

  get outputs(): SetStrategyCall__Outputs {
    return new SetStrategyCall__Outputs(this);
  }
}

export class SetStrategyCall__Inputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newStrategy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetStrategyCall__Outputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }
}

export class SetStrategyTargetPercentageCall extends ethereum.Call {
  get inputs(): SetStrategyTargetPercentageCall__Inputs {
    return new SetStrategyTargetPercentageCall__Inputs(this);
  }

  get outputs(): SetStrategyTargetPercentageCall__Outputs {
    return new SetStrategyTargetPercentageCall__Outputs(this);
  }
}

export class SetStrategyTargetPercentageCall__Inputs {
  _call: SetStrategyTargetPercentageCall;

  constructor(call: SetStrategyTargetPercentageCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get targetPercentage_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetStrategyTargetPercentageCall__Outputs {
  _call: SetStrategyTargetPercentageCall;

  constructor(call: SetStrategyTargetPercentageCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferMultipleCall extends ethereum.Call {
  get inputs(): TransferMultipleCall__Inputs {
    return new TransferMultipleCall__Inputs(this);
  }

  get outputs(): TransferMultipleCall__Outputs {
    return new TransferMultipleCall__Outputs(this);
  }
}

export class TransferMultipleCall__Inputs {
  _call: TransferMultipleCall;

  constructor(call: TransferMultipleCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tos(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class TransferMultipleCall__Outputs {
  _call: TransferMultipleCall;

  constructor(call: TransferMultipleCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get direct(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get renounce(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WhitelistMasterContractCall extends ethereum.Call {
  get inputs(): WhitelistMasterContractCall__Inputs {
    return new WhitelistMasterContractCall__Inputs(this);
  }

  get outputs(): WhitelistMasterContractCall__Outputs {
    return new WhitelistMasterContractCall__Outputs(this);
  }
}

export class WhitelistMasterContractCall__Inputs {
  _call: WhitelistMasterContractCall;

  constructor(call: WhitelistMasterContractCall) {
    this._call = call;
  }

  get masterContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WhitelistMasterContractCall__Outputs {
  _call: WhitelistMasterContractCall;

  constructor(call: WhitelistMasterContractCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get share(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get shareOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}
