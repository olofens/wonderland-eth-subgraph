// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogAccrue extends ethereum.Event {
  get params(): LogAccrue__Params {
    return new LogAccrue__Params(this);
  }
}

export class LogAccrue__Params {
  _event: LogAccrue;

  constructor(event: LogAccrue) {
    this._event = event;
  }

  get accruedAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogAddCollateral extends ethereum.Event {
  get params(): LogAddCollateral__Params {
    return new LogAddCollateral__Params(this);
  }
}

export class LogAddCollateral__Params {
  _event: LogAddCollateral;

  constructor(event: LogAddCollateral) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogBorrow extends ethereum.Event {
  get params(): LogBorrow__Params {
    return new LogBorrow__Params(this);
  }
}

export class LogBorrow__Params {
  _event: LogBorrow;

  constructor(event: LogBorrow) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get part(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogExchangeRate extends ethereum.Event {
  get params(): LogExchangeRate__Params {
    return new LogExchangeRate__Params(this);
  }
}

export class LogExchangeRate__Params {
  _event: LogExchangeRate;

  constructor(event: LogExchangeRate) {
    this._event = event;
  }

  get rate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogFeeTo extends ethereum.Event {
  get params(): LogFeeTo__Params {
    return new LogFeeTo__Params(this);
  }
}

export class LogFeeTo__Params {
  _event: LogFeeTo;

  constructor(event: LogFeeTo) {
    this._event = event;
  }

  get newFeeTo(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogRemoveCollateral extends ethereum.Event {
  get params(): LogRemoveCollateral__Params {
    return new LogRemoveCollateral__Params(this);
  }
}

export class LogRemoveCollateral__Params {
  _event: LogRemoveCollateral;

  constructor(event: LogRemoveCollateral) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogRepay extends ethereum.Event {
  get params(): LogRepay__Params {
    return new LogRepay__Params(this);
  }
}

export class LogRepay__Params {
  _event: LogRepay;

  constructor(event: LogRepay) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get part(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogWithdrawFees extends ethereum.Event {
  get params(): LogWithdrawFees__Params {
    return new LogWithdrawFees__Params(this);
  }
}

export class LogWithdrawFees__Params {
  _event: LogWithdrawFees;

  constructor(event: LogWithdrawFees) {
    this._event = event;
  }

  get feeTo(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feesEarnedFraction(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Abracvxtricrypto2__accrueInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Abracvxtricrypto2__borrowResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Abracvxtricrypto2__totalBorrowResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Abracvxtricrypto2__updateExchangeRateResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Abracvxtricrypto2 extends ethereum.SmartContract {
  static bind(address: Address): Abracvxtricrypto2 {
    return new Abracvxtricrypto2("Abracvxtricrypto2", address);
  }

  BORROW_OPENING_FEE(): BigInt {
    let result = super.call(
      "BORROW_OPENING_FEE",
      "BORROW_OPENING_FEE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BORROW_OPENING_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BORROW_OPENING_FEE",
      "BORROW_OPENING_FEE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  COLLATERIZATION_RATE(): BigInt {
    let result = super.call(
      "COLLATERIZATION_RATE",
      "COLLATERIZATION_RATE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_COLLATERIZATION_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "COLLATERIZATION_RATE",
      "COLLATERIZATION_RATE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LIQUIDATION_MULTIPLIER(): BigInt {
    let result = super.call(
      "LIQUIDATION_MULTIPLIER",
      "LIQUIDATION_MULTIPLIER():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_LIQUIDATION_MULTIPLIER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LIQUIDATION_MULTIPLIER",
      "LIQUIDATION_MULTIPLIER():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accrueInfo(): Abracvxtricrypto2__accrueInfoResult {
    let result = super.call(
      "accrueInfo",
      "accrueInfo():(uint64,uint128,uint64)",
      []
    );

    return new Abracvxtricrypto2__accrueInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_accrueInfo(): ethereum.CallResult<Abracvxtricrypto2__accrueInfoResult> {
    let result = super.tryCall(
      "accrueInfo",
      "accrueInfo():(uint64,uint128,uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Abracvxtricrypto2__accrueInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  bentoBox(): Address {
    let result = super.call("bentoBox", "bentoBox():(address)", []);

    return result[0].toAddress();
  }

  try_bentoBox(): ethereum.CallResult<Address> {
    let result = super.tryCall("bentoBox", "bentoBox():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  borrow(to: Address, amount: BigInt): Abracvxtricrypto2__borrowResult {
    let result = super.call(
      "borrow",
      "borrow(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new Abracvxtricrypto2__borrowResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_borrow(
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<Abracvxtricrypto2__borrowResult> {
    let result = super.tryCall(
      "borrow",
      "borrow(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Abracvxtricrypto2__borrowResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  collateral(): Address {
    let result = super.call("collateral", "collateral():(address)", []);

    return result[0].toAddress();
  }

  try_collateral(): ethereum.CallResult<Address> {
    let result = super.tryCall("collateral", "collateral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exchangeRate(): BigInt {
    let result = super.call("exchangeRate", "exchangeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_exchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("exchangeRate", "exchangeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeTo(): Address {
    let result = super.call("feeTo", "feeTo():(address)", []);

    return result[0].toAddress();
  }

  try_feeTo(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeTo", "feeTo():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  magicInternetMoney(): Address {
    let result = super.call(
      "magicInternetMoney",
      "magicInternetMoney():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_magicInternetMoney(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "magicInternetMoney",
      "magicInternetMoney():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  masterContract(): Address {
    let result = super.call("masterContract", "masterContract():(address)", []);

    return result[0].toAddress();
  }

  try_masterContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "masterContract",
      "masterContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracleData(): Bytes {
    let result = super.call("oracleData", "oracleData():(bytes)", []);

    return result[0].toBytes();
  }

  try_oracleData(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("oracleData", "oracleData():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  repay(to: Address, skim: boolean, part: BigInt): BigInt {
    let result = super.call("repay", "repay(address,bool,uint256):(uint256)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromBoolean(skim),
      ethereum.Value.fromUnsignedBigInt(part)
    ]);

    return result[0].toBigInt();
  }

  try_repay(
    to: Address,
    skim: boolean,
    part: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repay",
      "repay(address,bool,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBoolean(skim),
        ethereum.Value.fromUnsignedBigInt(part)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBorrow(): Abracvxtricrypto2__totalBorrowResult {
    let result = super.call(
      "totalBorrow",
      "totalBorrow():(uint128,uint128)",
      []
    );

    return new Abracvxtricrypto2__totalBorrowResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_totalBorrow(): ethereum.CallResult<Abracvxtricrypto2__totalBorrowResult> {
    let result = super.tryCall(
      "totalBorrow",
      "totalBorrow():(uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Abracvxtricrypto2__totalBorrowResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  totalCollateralShare(): BigInt {
    let result = super.call(
      "totalCollateralShare",
      "totalCollateralShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalCollateralShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCollateralShare",
      "totalCollateralShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateExchangeRate(): Abracvxtricrypto2__updateExchangeRateResult {
    let result = super.call(
      "updateExchangeRate",
      "updateExchangeRate():(bool,uint256)",
      []
    );

    return new Abracvxtricrypto2__updateExchangeRateResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_updateExchangeRate(): ethereum.CallResult<
    Abracvxtricrypto2__updateExchangeRateResult
  > {
    let result = super.tryCall(
      "updateExchangeRate",
      "updateExchangeRate():(bool,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Abracvxtricrypto2__updateExchangeRateResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  userBorrowPart(param0: Address): BigInt {
    let result = super.call(
      "userBorrowPart",
      "userBorrowPart(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userBorrowPart(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userBorrowPart",
      "userBorrowPart(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userCollateralShare(param0: Address): BigInt {
    let result = super.call(
      "userCollateralShare",
      "userCollateralShare(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userCollateralShare(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userCollateralShare",
      "userCollateralShare(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get bentoBox_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get magicInternetMoney_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AccrueCall extends ethereum.Call {
  get inputs(): AccrueCall__Inputs {
    return new AccrueCall__Inputs(this);
  }

  get outputs(): AccrueCall__Outputs {
    return new AccrueCall__Outputs(this);
  }
}

export class AccrueCall__Inputs {
  _call: AccrueCall;

  constructor(call: AccrueCall) {
    this._call = call;
  }
}

export class AccrueCall__Outputs {
  _call: AccrueCall;

  constructor(call: AccrueCall) {
    this._call = call;
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get skim(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get share(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get part(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get share(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class CookCall extends ethereum.Call {
  get inputs(): CookCall__Inputs {
    return new CookCall__Inputs(this);
  }

  get outputs(): CookCall__Outputs {
    return new CookCall__Outputs(this);
  }
}

export class CookCall__Inputs {
  _call: CookCall;

  constructor(call: CookCall) {
    this._call = call;
  }

  get actions(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get datas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class CookCall__Outputs {
  _call: CookCall;

  constructor(call: CookCall) {
    this._call = call;
  }

  get value1(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get maxBorrowParts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get swapper(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class ReduceSupplyCall extends ethereum.Call {
  get inputs(): ReduceSupplyCall__Inputs {
    return new ReduceSupplyCall__Inputs(this);
  }

  get outputs(): ReduceSupplyCall__Outputs {
    return new ReduceSupplyCall__Outputs(this);
  }
}

export class ReduceSupplyCall__Inputs {
  _call: ReduceSupplyCall;

  constructor(call: ReduceSupplyCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReduceSupplyCall__Outputs {
  _call: ReduceSupplyCall;

  constructor(call: ReduceSupplyCall) {
    this._call = call;
  }
}

export class RemoveCollateralCall extends ethereum.Call {
  get inputs(): RemoveCollateralCall__Inputs {
    return new RemoveCollateralCall__Inputs(this);
  }

  get outputs(): RemoveCollateralCall__Outputs {
    return new RemoveCollateralCall__Outputs(this);
  }
}

export class RemoveCollateralCall__Inputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveCollateralCall__Outputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get skim(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get part(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetFeeToCall extends ethereum.Call {
  get inputs(): SetFeeToCall__Inputs {
    return new SetFeeToCall__Inputs(this);
  }

  get outputs(): SetFeeToCall__Outputs {
    return new SetFeeToCall__Outputs(this);
  }
}

export class SetFeeToCall__Inputs {
  _call: SetFeeToCall;

  constructor(call: SetFeeToCall) {
    this._call = call;
  }

  get newFeeTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeToCall__Outputs {
  _call: SetFeeToCall;

  constructor(call: SetFeeToCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get direct(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get renounce(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateExchangeRateCall extends ethereum.Call {
  get inputs(): UpdateExchangeRateCall__Inputs {
    return new UpdateExchangeRateCall__Inputs(this);
  }

  get outputs(): UpdateExchangeRateCall__Outputs {
    return new UpdateExchangeRateCall__Outputs(this);
  }
}

export class UpdateExchangeRateCall__Inputs {
  _call: UpdateExchangeRateCall;

  constructor(call: UpdateExchangeRateCall) {
    this._call = call;
  }
}

export class UpdateExchangeRateCall__Outputs {
  _call: UpdateExchangeRateCall;

  constructor(call: UpdateExchangeRateCall) {
    this._call = call;
  }

  get updated(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get rate(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class WithdrawFeesCall extends ethereum.Call {
  get inputs(): WithdrawFeesCall__Inputs {
    return new WithdrawFeesCall__Inputs(this);
  }

  get outputs(): WithdrawFeesCall__Outputs {
    return new WithdrawFeesCall__Outputs(this);
  }
}

export class WithdrawFeesCall__Inputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall__Outputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}
